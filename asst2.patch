Index: kern/arch/mips/include/trapframe.h
===================================================================
--- kern/arch/mips/include/trapframe.h	(.../tags/asst2-start)	(revision 75)
+++ kern/arch/mips/include/trapframe.h	(.../trunk)	(revision 75)
@@ -72,6 +72,6 @@
  * happen.
  */
 void mips_usermode(struct trapframe *tf);
-void md_forkentry(struct trapframe *tf);
+void md_forkentry(void *tf, unsigned long dummy);
 
 #endif /* _MIPS_TRAPFRAME_H_ */
Index: kern/arch/mips/mips/trap.c
===================================================================
--- kern/arch/mips/mips/trap.c	(.../tags/asst2-start)	(revision 75)
+++ kern/arch/mips/mips/trap.c	(.../trunk)	(revision 75)
@@ -38,14 +38,21 @@
 void
 kill_curthread(u_int32_t epc, unsigned code, u_int32_t vaddr)
 {
+	int x=splhigh();
 	assert(code<NTRAPCODES);
-	kprintf("Fatal user mode trap %u (%s, epc 0x%x, vaddr 0x%x)\n",
-		code, trapcodenames[code], epc, vaddr);
+	
+	kprintf("Fatal user mode trap %u \n",
+		code);
 
 	/*
 	 * You will probably want to change this.
 	 */
-	panic("I don't know how to handle this\n");
+	int ret;
+
+	sys_exit(code,&ret);
+
+	splx(x);
+	//panic("I don't know how to handle this\n");
 }
 
 /*
Index: kern/arch/mips/mips/syscall.c
===================================================================
--- kern/arch/mips/mips/syscall.c	(.../tags/asst2-start)	(revision 75)
+++ kern/arch/mips/mips/syscall.c	(.../trunk)	(revision 75)
@@ -71,9 +71,34 @@
 	    case SYS_reboot:
 		err = sys_reboot(tf->tf_a0);
 		break;
+
 	    case SYS_write:
-	        err= sys_write(tf->tf_a0,tf->tf_a1,tf->tf_a2);
-	        break;
+	    err= sys_write(tf->tf_a0,tf->tf_a1,tf->tf_a2);
+	    break;
+
+	    case SYS_read:
+	    err = sys_read(tf->tf_a0,tf->tf_a1,tf->tf_a2, &retval);
+	    break;
+
+	    case SYS_fork:
+	    err = sys_fork(tf, &retval);
+	    break; 
+
+	    case SYS__exit:
+	    err = sys_exit(tf->tf_a0, &retval);
+	    break;
+
+	    case SYS_waitpid:
+	    err = sys_wait(tf->tf_a0, tf->tf_a1, tf->tf_a2, &retval);
+	    break; 
+
+	    case SYS_getpid:
+	    err= sys_getpid(&retval);
+	    break;
+
+	    case SYS_execv:
+	    err= sys_execv(tf->tf_a0,tf->tf_a1);
+	    break;
 	    /* Add stuff here */
  
 	    default:
@@ -110,7 +135,7 @@
 }
 
 void
-md_forkentry(struct trapframe *tf)
+md_forkentry(void *tf, unsigned long dummy)
 {
 	/*
 	 * This function is provided as a reminder. You need to write
@@ -118,6 +143,14 @@
 	 *
 	 * Thus, you can trash it and do things another way if you prefer.
 	 */
+	struct trapframe * tfp= (struct trapframe *) tf;
 
-	(void)tf;
+	 struct trapframe _tf = *tfp;
+	 _tf.tf_v0 = 0;
+	 _tf.tf_epc += 4;
+	 kfree(tf);
+
+	mips_usermode(&_tf);
+
+	
 }
Index: kern/include/thread.h
===================================================================
--- kern/include/thread.h	(.../tags/asst2-start)	(revision 75)
+++ kern/include/thread.h	(.../trunk)	(revision 75)
@@ -7,10 +7,29 @@
 
 /* Get machine-dependent stuff */
 #include <machine/pcb.h>
+#include <array.h>
 
+/*global process table*/
+extern struct hashtable * process_table;
+extern struct lock *tlb_lock;
 
-struct addrspace;
+// states
+#define FREE 0
+#define JOINED 1
+#define DEAD 2
 
+
+
+
+struct lock *tlb_lock;
+
+/*data structure related to process's family table*/
+struct child_info{
+	int child_tid;
+	int ret;
+	int status;
+};
+
 struct thread {
 	/**********************************************************/
 	/* Private thread members - internal to the thread system */
@@ -20,7 +39,9 @@
 	char *t_name;
 	const void *t_sleepaddr;
 	char *t_stack;
-	
+	int tid; 
+	struct array *child_list;
+	int parent;
 	/**********************************************************/
 	/* Public thread members - can be used by other code      */
 	/**********************************************************/
@@ -30,7 +51,8 @@
 	 * and will need to be manipulated by the userprog and/or vm
 	 * code.
 	 */
-	struct addrspace *t_vmspace;
+	struct addrspace *
+	t_vmspace;
 
 	/*
 	 * This is public because it isn't part of the thread system,
@@ -64,6 +86,7 @@
 		void (*func)(void *, unsigned long),
 		struct thread **ret);
 
+
 /*
  * Cause the current thread to exit.
  * Interrupts need not be disabled.
Index: kern/include/syscall.h
===================================================================
--- kern/include/syscall.h	(.../tags/asst2-start)	(revision 75)
+++ kern/include/syscall.h	(.../trunk)	(revision 75)
@@ -7,5 +7,11 @@
 
 int sys_reboot(int code);
 int sys_write(int file,const void *buf,size_t n);
+int sys_read(int fd, void *buf, size_t buflen, int * retval);
+int sys_fork(struct trapframe *tf, int *retval);
+int sys_wait(int tid, int *status, int option, int * retval);
+int sys_exit(int ret, int *retval);
+int sys_getpid(int *retval);
+int sys_execv(char* progname, char** arg);
 
 #endif /* _SYSCALL_H_ */
Index: kern/include/test.h
===================================================================
--- kern/include/test.h	(.../tags/asst2-start)	(revision 75)
+++ kern/include/test.h	(.../trunk)	(revision 75)
@@ -45,6 +45,6 @@
 void menu(char *argstr);
 
 /* Routine for running userlevel test code. */
-int runprogram(char *progname);
+runprogram(char *progname, unsigned long  argc, char ** argv);
 
 #endif /* _TEST_H_ */
Index: kern/include/hashtable.h
===================================================================
--- kern/include/hashtable.h	(.../tags/asst2-start)	(revision 0)
+++ kern/include/hashtable.h	(.../trunk)	(revision 75)
@@ -0,0 +1,38 @@
+#ifndef _HASHTABLE_H_
+#define _HASHTABLE_H_
+
+#include <types.h>
+#include <kern/errno.h>
+#include <kern/unistd.h>
+#include <lib.h>
+
+struct hashentry{
+	char * key;
+	void * entry;
+};
+
+
+struct hashtable {
+	int size;
+	char * name;
+	struct hashentry ** table;
+	struct hashentry deleted; // dummy
+	struct hashentry reserved; // the place reserved so no one can occupy that
+};
+
+
+
+
+struct hashtable * ht_create(int size, char * name);
+int ht_add_element(struct hashtable * ht, char * key, void * ptr);
+int ht_delete_element_by_index(struct hashtable * ht, int index, int destroy);
+int ht_delete_element_by_key(struct hashtable * ht, char * key, int destroy);
+void * ht_retrieve_element_by_index(struct hashtable * ht, int index);
+void * ht_retrieve_element_by_key(struct hashtable * ht, char * key);
+
+unsigned int hashfunction (char* key);
+
+
+
+#endif /* _HASHTABLE_H_ */
+
Index: kern/main/main.c
===================================================================
--- kern/main/main.c	(.../tags/asst2-start)	(revision 75)
+++ kern/main/main.c	(.../trunk)	(revision 75)
@@ -10,13 +10,20 @@
 #include <test.h>
 #include <synch.h>
 #include <thread.h>
+#include <curthread.h>
 #include <scheduler.h>
 #include <dev.h>
 #include <vfs.h>
 #include <vm.h>
+#include <machine/trapframe.h> 
 #include <syscall.h>
 #include <version.h>
 #include <hello.h>
+#include <addrspace.h>
+#include <hashtable.h>
+#include <array.h>
+#include <synch.h>
+
 /*
  * These two pieces of data are maintained by the makefiles and build system.
  * buildconfig is the name of the config file the kernel was configured with.
@@ -36,7 +43,12 @@
     "Copyright (c) 2000, 2001, 2002, 2003\n"
     "   President and Fellows of Harvard College.  All rights reserved.\n";
 
+/*
+ * The lock designated for locking page table
+ */
 
+struct lock *tlb_lock;
+
 /*
  * Initial boot sequence.
  */
@@ -70,7 +82,11 @@
 		GROUP_VERSION, buildconfig, buildversion);
 	kprintf("\n");
 
+	
+
 	ram_bootstrap();
+
+	tlb_lock=lock_create("TLB LOCK");
 	scheduler_bootstrap();
 	thread_bootstrap();
 	vfs_bootstrap();
@@ -81,6 +97,8 @@
 	/* Default bootfs - but ignore failure, in case emu0 doesn't exist */
 	vfs_setbootfs("emu0");
 
+	/* Initializing the TLB lock*/
+	
 
 	/*
 	 * Make sure various things aren't screwed up.
@@ -156,6 +174,7 @@
  */
 
 int sys_write(int file,const void *buf,size_t n){
+	(void) file;
   int err=0; 
   int i=0;
   if(buf==NULL){
@@ -181,10 +200,558 @@
 
 }
 
+int
+sys_read(int fd, void *buf, size_t buflen, int * retval)
+{
+	(void) fd;
+	/* Number of bytes being read not yet returned */
+	int err;
+	/* make sure buf is pointing to a valid addres */
+	if (buf == NULL)
+		return EFAULT;
+	int i=0;
+	char *str = (char *)kmalloc(64 * sizeof(char));
+
+	assert(str != NULL);
+	for (i=0; i<buflen;i++)
+			str[i]=getch();
+	/* Read a string off the console into str */
+	//kgets(str, 64);
+	//kprintf("iiiiiiimmmmmm hhhhherrreee\n");
+	//kprintf("value read was %s\n",str);
+	err = copyout(str, (userptr_t) buf , buflen);
+
+
+	kfree(str);
+	*retval = buflen;
+	return err; 
+}
+
+
+int
+sys_fork(struct trapframe *tf, int *retval)
+{
+	int s = splhigh();
+	int err = 0;
+	/*Allocating a copy of current thread's 
+	* trapframe in the heap so it can be shared 
+	*/
+	
+	struct trapframe * tf_copy = (struct trapframe *)kmalloc(sizeof(struct trapframe));
+	if(tf_copy == NULL)
+	{
+		splx(s);
+		return ENOMEM;
+	}
+	
+	if(tf_copy == NULL)
+	{
+		
+		splx(s);
+		return ENOMEM;
+	}
+
+	*tf_copy = *tf; // short memcopy
+
+
+	struct thread * child_thread;
+	err = thread_fork(NULL, tf_copy, 0, md_forkentry, &child_thread);
+	if(err)
+	{
+		
+		splx(s);
+		return err;
+	}
+
+	
+	/*************** DATA ALLOCATION TO HANDLE WAIT & EXIT **************/
+
+	/*child_thread->t_name = (char *)kmalloc(20*sizeof(char));
+	snprintf(child_thread->t_name, 20, "%lx",child_thread);
+
+
+	int tid = ht_add_element(process_table, child_thread->t_name, child_thread);
+	if (tid == -1){
+		return -1;
+	}
+	child_thread->tid = tid;
+	child_thread->parent = curthread->tid;
+
+	struct child_info* item = (struct child_info *) kmalloc (sizeof (struct child_info));
+	item->child_tid = tid;
+	item->status = FREE;
+
+	//Adding to cutthread child_list
+	err = array_add(curthread->child_list, item); */
+
+    /******************** END OF DATA ALLOCATION *************************/
+
+	//lock_acquire(tlb_lock);
+	/*err = as_copy(curthread->t_vmspace, &(child_thread->t_vmspace));
+	//lock_release(tlb_lock);
+	if(err)
+	{
+		splx(s);
+		return err;
+	}*/
+
+	*retval = child_thread->tid;
+	
+	splx(s);
+	return 0;
+}
+
+/* Going to wait on process with given tid */
+int sys_wait(int tid, int *status, int option, int * retval)
+{
+	
+	int s = splhigh();
+	struct child_info * child;
+
+	// Check if option requested is valid
+	if (option != 0)
+	{
+		splx(s);
+		return EINVAL;
+	}
+
+	// Check whether tid is my child or not.
+	int n = array_getnum(curthread->child_list);
+	int i = 0;
+	int is_child = 0;
+	int index;
+	for (i = 0; i < n && is_child == 0; i++)
+	{
+		child = (struct child_info *)array_getguy(curthread->child_list, i);
+		if(child->child_tid == tid)
+		{
+			is_child = 1;
+			index = i;
+		}
+	}
+
+	if (is_child == 0) // Can't wait on this tid so retrun error ?????
+	{
+		splx(s);
+		return EINVAL;
+	}
+
+	// if child has not exited yet then I sleep on my chid thread struct address
+	if(child->status != DEAD)
+	{
+		child->status = JOINED;
+		void* slpadr = ht_retrieve_element_by_index(process_table, tid);
+		thread_sleep(slpadr);
+	}
+
+	// Now I am going to read my child ret value. Then unreserve its place in
+	// pcb table and then remove it from my child list.
+	int ret_status = child->ret;
+	process_table->table[child->child_tid] = & (process_table->deleted);
+	array_remove(curthread->child_list, index);
+	
+	int err = copyout(& ret_status, (userptr_t) status, 4);
+
+	if (err)
+	{
+		splx(s);
+		return err;
+	}
+
+	*retval=tid;
+	//*retval=child->ret;
+	///array_remove(curthread->child_list, index);
+	splx(s);
+	return 0;
+}
+
+
+
+int sys_exit(int ret, int *retval)
+{
+
+	struct thread * child_thread;
+	struct thread * parent_thread;
+	struct child_info * child;
+	int n;
+	int i = 0;
+
+	int s = splhigh();
+	
+	// go to its children thread struct (those haven't exited yet) and invalidate their parent field.
+	// Those who have exited (DEAD) they reserved their place so no thread will be assigned the same 
+	// tid as them. So we need to unreserve their place. 
+	n = array_getnum(curthread->child_list);
+
+	for (i = 0; i< n; i++)
+	{
+		child = (struct child_info *)array_getguy(curthread->child_list, i);
+
+		if(child->status != DEAD)
+		{
+			child_thread = (struct thread *) ht_retrieve_element_by_index(process_table, child->child_tid);
+			if (child_thread != NULL)
+				child_thread->parent = -1;		// Invalidating parent field
+		}
+
+		else if (child->status == DEAD)
+		{
+			process_table->table[child->child_tid] = & (process_table->deleted);
+		}
+	}
+
+	// Go to my parent thread struct if my parent field is valid and find yourself in your parent 
+	// child_list make your status DEAD and put your return value there.
+	if(curthread->parent != -1) // Check currentthread's parent exists
+	{
+		parent_thread = (struct thread *)ht_retrieve_element_by_index(process_table, curthread->parent);
+
+		n = array_getnum(parent_thread->child_list); // number of children parent has
+		for (i = 0; i < n; i++)
+		{
+			child = (struct child_info *)array_getguy(parent_thread->child_list, i);
+			if (child->child_tid == curthread->tid)
+			{
+				child->status = DEAD;
+				child->ret = ret;
+				break;
+			}
+		}
+	}
+
+	// if my parent is valid then I reserve my place in process_table so no one will be assigned 
+	// same tid as me until my parent exit when it also unreserve my place.
+	// Otherwirse just remove myself from process_table.
+	if (curthread->parent != -1)
+		process_table->table[curthread->tid] = & (process_table->reserved);
+
+	else 
+		process_table->table[curthread->tid] = & (process_table->deleted);
+
+	thread_wakeup(curthread);
+	//splx(s);
+	thread_exit();
+
+	return 0; // never returns since context switch will happen
+}
+
+
+
+int sys_execv(char* progname, char** arg)
+{
+	struct vnode *v;
+	vaddr_t entrypoint, stackptr;
+	//int s = splhigh();
+	int result;
+	int argc=0;
+	int sum=0;
+	int dummy=0;
+	int i=0;
+	int actual=0;
+	char * temp;
+	int lengths[16];
+	vaddr_t pointers[16];
+	char **ARG;
+	char * PROGNAME;
+	struct addrspace * old_addr=NULL;
+
+	lock_acquire(tlb_lock);
+
+	//kprintf("EXE -> 0x%x -> [%s]\n ------\n",progname,progname);
+	//kprintf("0) EXECV ENTERING DONE  	[%d] \n",curthread->tid);
+
+
+	/**** COPYING DATA FROM USER LEVEL****/
+	ARG = (vaddr_t*) kmalloc(sizeof(vaddr_t)*16);
+	kprintf("	ARG <0x%x>\n",ARG);
+	for(i=0;i<10;i++)
+		ARG[i]=NULL;
+	
+
+	if (ARG==NULL){
+		//kprintf("	ENOME ERRPR\n");
+		result= ENOMEM;
+		goto fail;
+	}
+	PROGNAME= (char *) kmalloc(sizeof(char)*30);
+	//kprintf("	PROGNAME <0x%x>\n",PROGNAME);
+	if (PROGNAME==NULL){
+		//kprintf("	ENOME ERRPR\n");
+		result=ENOMEM;
+		goto fail;
+	}
+	 //cheking if memory allocation was successful
+	//kprintf(" kernel progname  %s \n",progname);
+
+	result=copyinstr((const_userptr_t) progname, PROGNAME, 30, &actual);
+	//kprintf(" kernel progname  %s my momy 0x%d me 0x%d \n",progname,curthread->parent,curthread->tid);
+	if(result){
+		goto fail;
+	}
+
+	//kprintf("	progname  %s \n",PROGNAME);
+
+  	// copying data from user space to kernel space
+  	/*kprintf(" ARG  0x%x \n",arg);
+  	do
+  	{
+		kprintf(" 1 [%d] pointer =0x%x \n",i,arg[i]);
+		//kprintf("string :%s \n",arg[i]);
+  		copyin(arg + i*sizeof(vaddr_t) , ARG[i],sizeof(vaddr_t));
+  		kprintf(" 2 [%d] pointer =0x%x \n",i,ARG[i]);
+  		i++;
+  	}while(ARG[i-1]!=NULL);
+
+  	
+8*/
+
+
+  	//kprintf("	ARGUMENTS PASSED TO EXECV:\n");
+  	for(i=0;i<16;i++){
+		if (arg[i]==NULL)
+		{
+			argc=i;
+  			break;
+		}
+  		temp=(char *) kmalloc(sizeof(char)*30);
+		if (temp==NULL){
+			result= ENOMEM;
+			goto fail;
+		}
+  		//ARG[i]=NULL;
+  		//kprintf(" [%d] arguments %s\n",i,arg[i]);
+  		result=copyinstr(arg[i], temp, 30, &actual);
+  		if(result){
+  		//	kprintf("	copyinstr fucked up -_- 0x%x\n",arg[i]);
+			goto fail;
+		}
+
+  		lengths[i]=strlen(arg[i]);
+  		ARG[i]=temp;
+  	}
+
+  	
+ 
+
+
+
+
+
+	/**** END OF COPYING DATA FROM USER LEVEL****/
+
+	//kprintf("1) MEMORY DONE   		[%d] \n",curthread->tid);
+
+	/* saving the old address_space*/
+	old_addr=curthread->t_vmspace;
+
+	/* Open the file. */
+	result = vfs_open(PROGNAME, O_RDONLY, &v);
+	if (result) {
+		kprintf("	0 ENOME ERRPR\n");
+		goto fail;
+	}
+	/* Create a new address space. */
+	curthread->t_vmspace = as_create();
+	if (curthread->t_vmspace==NULL) {
+		vfs_close(v);
+		kprintf("	<1 ENOME ERRPR>\n");
+		result= ENOMEM;
+		goto fail;
+	}
+	/* Activate it. */
+	as_activate(curthread->t_vmspace);
+	//kprintf("	t_vmspace <0x%x>\n",curthread->t_vmspace);
+
+	/* Load the executable. */
+	result = load_elf(v, &entrypoint);
+	if (result) {
+		/* thread_exit destroys curthread->t_vmspace */
+		kprintf("	<2 ENOME ERRPR>\n");
+		vfs_close(v);
+		goto fail;
+	}
+
+	/* Done with the file now. */
+	vfs_close(v);
+
+	/* Define the user stack in the address space */
+	result = as_define_stack(curthread->t_vmspace, &stackptr);
+	if (result) {
+		/* thread_exit destroys curthread->t_vmspace */
+		kprintf("	<3 ENOME ERRPR>\n");
+		goto fail;
+	}
+
+	/* Destroy the old address space */
+	
+	/*if (old_addr!=NULL && old_addr!=0xdeadbeef)
+	{
+		//kprintf("	old_addr free 0x%x\n",old_addr);
+		as_destroy(old_addr);
+	}
+	else 
+	{
+		result -1;
+		goto fail;
+	}*/
+
+	//kprintf("2) ADDRESS_SPACE 		[%d] \n",curthread->tid);
+
+
+
+
+
+
+	/**** COPYING OUT THE MEMORY INTO USER SPACE ***/
+	
+	/********  preparing the stack *****/
+	sum=0;
+	for (i=0;i<argc;i++) // total number of characters
+		sum+=lengths[i]+1;
+  	stackptr-=(argc+1)* sizeof (vaddr_t)+sum;
+  	int j=0;
+	sum=0;
+
+  	for(j=0;j<argc && ARG!=NULL ;j++)
+  	{
+	  		result=copyoutstr(ARG[j], stackptr+sum, lengths[j]+1, &actual);
+
+	  		if(result){
+	  			//kprintf(" copyoutstr fucked up -_- 0x%x\n",ARG[j]);
+				goto fail;
+			}
+
+	  		pointers[j]=stackptr+sum;
+
+	  		if(ARG[j]!=NULL && ARG[j]!=0xdeadbeef)
+	  		{
+				kfree(ARG[j]);
+				ARG[j]=NULL;
+	  		}
+	  		else
+	  		{
+	 			result=-1;
+	 			goto fail;
+	  		}
+
+			sum+=lengths[j]+1;
+  	}
+
+	pointers[j]=NULL;
+
+  	result=copyout(pointers, stackptr+sum, (argc+1)*sizeof (vaddr_t));
+
+  	if(result){
+		goto fail;
+	}
+
+	/**** END COPYING OUT THE MEMORY INTO USER SPACE ****/
+
+
+
+
+
+
+
+
+
+    /**************** FREEING MEMORY ************************/
+	if (ARG!=NULL && ARG!=0xdeadbeef)
+		kfree(ARG);
+	else 
+	{
+		result =-1;
+		goto fail;
+	}
+		
+	if (PROGNAME!=NULL && PROGNAME!=0xdeadbeef)
+		kfree(PROGNAME);
+	else 
+	{
+		result =-1;
+		goto fail;	
+	}
+
+	/*************** FREEING MEMORY ************************/
+
+
+
+
+	if (old_addr!=NULL && old_addr!=0xdeadbeef)
+	{
+		//kprintf("	old_addr free 0x%x\n",old_addr);
+		as_destroy(old_addr);
+	}
+	else 
+	{
+		result -1;
+		goto fail;
+	}
+
+
+
+	lock_release(tlb_lock);
+
+	//kprintf("3) EXECV NORMAL DONE 		[%d]\n ---------------------\n",curthread->tid);
+	//splx(s);
+
+
+	/* Warp to user mode. */
+	md_usermode(argc/*argc*/, stackptr+sum /*userspace addr of argv*/,
+		    stackptr, entrypoint);
+	
+
+
+	/* md_usermode does not return */
+	panic("md_usermode returned\n");
+	return 0;
+
+
+
+fail:
+	
+	//kprintf("3) EXECV ERROR DONE err# %d\n Erasing Deleting memory ...\n",result);
+	for (i=0; i <16 && ARG!=NULL && ARG!=0xdeadbeef; i++){
+		
+		if (ARG[i]!=NULL && ARG[i]!=0xdeadbeef)
+			kfree(ARG[i]);
+	}
+	
+
+	if (ARG!=NULL && ARG!=0xdeadbeef)
+		kfree(ARG);
+	if (PROGNAME!=NULL && PROGNAME!=0xdeadbeef )
+		kfree(PROGNAME);
+
+	if(old_addr!=NULL)
+	{
+	as_destroy(curthread->t_vmspace);
+	curthread->t_vmspace = old_addr;
+	as_activate(curthread->t_vmspace);
+	}
+
+	kprintf("3) EXECV ERROR DONE err# %d\n Erasing Deleting memory ...\n",result);
+	lock_release(tlb_lock);
+	
+	//splx(s);
+	return result;
+
+}
+
+int sys_getpid(int *retval)
+{
+	*retval=curthread->tid;
+	return 0;
+}
+
+
+
 /*
  * Kernel main. Boot up, then fork the menu thread; wait for a reboot
  * request, and then shut down.
  */
+
+
 int
 kmain(char *arguments)
 {
Index: kern/main/menu.c
===================================================================
--- kern/main/menu.c	(.../tags/asst2-start)	(revision 75)
+++ kern/main/menu.c	(.../trunk)	(revision 75)
@@ -56,20 +56,30 @@
 {
 	char **args = ptr;
 	char progname[128];
+	char *argv[16];
 	int result;
-
+	//char **argv=(char**) kmalloc(sizeof(char*)*16);
+	char *temp;
 	assert(nargs >= 1);
 
-	if (nargs > 2) {
-		kprintf("Warning: argument passing from menu not supported\n");
-	}
+	//if (nargs > 2) {
+		//kprintf("Warning: argument passing from menu not supported\n");
+	//}
 
 	/* Hope we fit. */
 	assert(strlen(args[0]) < sizeof(progname));
 
 	strcpy(progname, args[0]);
 
-	result = runprogram(progname);
+	int i=0;
+	for (i=0; i<nargs ; i++)
+	{
+		argv[i]=(char*) kmalloc(sizeof(char)*(strlen(args[i])+1));
+		strcpy(argv[i],args[i]);
+		//kprintf("[%d] %s",i,argv[i]);
+	}
+
+	result = runprogram(progname,nargs,argv);
 	if (result) {
 		kprintf("Running program %s failed: %s\n", args[0],
 			strerror(result));
@@ -102,14 +112,19 @@
 		"synchronization-problems kernel.\n");
 #endif
 
+    struct thread * child_thread;
 	result = thread_fork(args[0] /* thread name */,
 			args /* thread arg */, nargs /* thread arg */,
-			cmd_progthread, NULL);
+			cmd_progthread, &child_thread);
 	if (result) {
 		kprintf("thread_fork failed: %s\n", strerror(result));
 		return result;
 	}
 
+	// Go and sleep on your child
+	int s = splhigh();
+	thread_sleep(child_thread);
+	splx(s);
 	return 0;
 }
 
Index: kern/conf/conf.kern
===================================================================
--- kern/conf/conf.kern	(.../tags/asst2-start)	(revision 75)
+++ kern/conf/conf.kern	(.../trunk)	(revision 75)
@@ -305,6 +305,7 @@
 file      lib/kprintf.c
 file      lib/kgets.c
 file      lib/misc.c
+file      lib/hashtable.c
 
 #
 # Standard C functions
Index: kern/lib/hashtable.c
===================================================================
--- kern/lib/hashtable.c	(.../tags/asst2-start)	(revision 0)
+++ kern/lib/hashtable.c	(.../trunk)	(revision 75)
@@ -0,0 +1,194 @@
+#include <hashtable.h>
+#include <types.h>
+#include <kern/errno.h>
+#include <kern/unistd.h>
+#include <lib.h>
+#include <lib.h>
+
+struct hashtable * ht_create(int size, char * name)
+{
+	/* allocate an hashtable structure */
+	struct hashtable * ht = (struct hashtable *)kmalloc(sizeof(struct hashtable));
+	if (ht == NULL)
+		return NULL;
+
+	/* set the hashtable name */
+	ht->name = (char *)kmalloc((strlen(name)+1)*sizeof(char));
+	if (ht->name == NULL)
+		return NULL;
+	strcpy(ht->name, name);
+
+	ht->size = size;
+
+	/* Allocate an array of struct hashentry * of the size of "size" */
+	ht->table = (struct hashentry **)kmalloc(size*sizeof(struct hashentry *));
+	if (ht->table == NULL)
+		return NULL;
+
+	/* Initially set all void * pointer to NULL*/
+	int i;
+	for (i = 0; i < size; i++)
+		ht->table[i] = NULL;
+
+	return ht;
+
+}
+
+
+int ht_add_element(struct hashtable * ht, char * key, void * ptr)
+{
+	assert(ht != NULL);
+	assert(key != NULL);
+	assert (ptr != NULL);
+
+	int size = ht->size;
+
+	/* get the hashkey corresponding */
+	unsigned int index = hashfunction(key);
+	//int index =1;
+	index = (index % size);
+
+	int offset = 0;
+
+	/* right now implementing linear probing */
+	while (ht->table[(index + offset)% size] != NULL &&  
+		ht->table[(index + offset)% size] != &(ht->deleted) && offset != size)
+		offset++; 
+
+	/* when get out of while either a slot is found which is (index+offset)%size 
+	or offset == size which means no slot is found */
+
+	if (offset == size)
+		return -1; 	// indicates no slot is available 
+
+	index = (index+offset)%size;
+	
+	ht->table[index] = (struct hashentry *)kmalloc(sizeof(struct hashentry));
+
+	if (ht->table[index] == NULL)
+		return -1; 	// indicates no memory available
+
+	ht->table[index]-> key = (char *)kmalloc((strlen(key)+1)*sizeof(char));
+	if(ht->table[index]->key == NULL) {
+		return -1;
+	}
+	strcpy(ht->table[index]-> key, key);
+
+	ht->table[index]-> entry = ptr;
+
+
+	return index;	    
+}
+
+
+int ht_delete_element_by_index(struct hashtable * ht, int index, int destroy)
+{
+	int size = ht->size;
+	assert (ht != NULL);
+	assert(index < size && index > 0);
+
+	/* make sure item exist at position index */
+	if (ht->table[index] == NULL || ht->table[index] == &(ht->deleted))
+		return -1;   // indicating no item exist to be deleted
+
+	/* Otherwise the item exist. if destroy flag is set
+	   then the entry item gets freed in addition to being detached from 
+	   the the table. Else just gets detached but not freed */
+
+	if (destroy)
+		kfree(ht->table[index]->entry);
+		
+	kfree(ht->table[index]->key);
+	kfree(ht->table[index]);
+	
+	ht->table[index] = &(ht->deleted);
+
+	return 0;
+}
+
+
+int ht_delete_element_by_key(struct hashtable * ht, char * key, int destroy)
+{
+	assert(ht != NULL);
+	assert(key != NULL);
+	
+	int index = hashfunction(key);
+	int size = ht->size;
+	int offset = 0;
+
+	while (ht->table[(index + offset) % size] != NULL && 
+		strcmp(ht->table[(index + offset) % size]->key, key) != 0 && offset != size)
+		offset++;
+
+	if (offset == size || ht->table[(index + offset) % size] == NULL)
+	{
+		// item with given key not exist
+		return -1;
+	}
+
+	// Otherwise key is found
+	index = index + offset;
+
+	if (destroy)
+		kfree(ht->table[index]->entry);
+		
+	kfree(ht->table[index]->key);
+	kfree(ht->table[index]);
+	
+	ht->table[index] = &(ht->deleted);
+
+	return 0;
+
+
+}
+
+
+void * ht_retrieve_element_by_index(struct hashtable * ht, int index)
+{
+	
+	assert(ht != NULL);
+
+	/* make sure item exist at position index */
+	if (ht->table[index] == NULL || ht->table[index] == &(ht->deleted))
+		return NULL;   // indicating no item exist to be retrieved
+
+	return ht->table[index]->entry;
+}
+
+void * ht_retrieve_element_by_key(struct hashtable * ht, char * key)
+{
+	assert (ht != NULL);
+	assert(key != NULL);
+
+	int index = hashfunction(key);
+	int size = ht->size;
+	int offset = 0;
+
+	while (ht->table[(index + offset) % size] != NULL && 
+		strcmp(ht->table[(index + offset) % size]->key, key) != 0 && offset != size)
+		offset++;
+
+	if (offset == size || ht->table[(index + offset) % size] == NULL)
+	{
+		// item with given key not exist
+		return NULL;
+	}
+
+	// Otherwise key is found
+	index = index + offset;
+
+	return ht->table[index]->entry;
+}
+
+
+unsigned int hashfunction (char* key) 
+{
+	unsigned int hash = 101;
+	int i = 0;
+	for (i = 0; i< strlen(key); i++) {
+		hash = hash*101+key[i];
+	}
+	return hash;
+}
+
+
Index: kern/lib/kgets.c
===================================================================
--- kern/lib/kgets.c	(.../tags/asst2-start)	(revision 75)
+++ kern/lib/kgets.c	(.../trunk)	(revision 75)
@@ -27,6 +27,7 @@
 	int ch;
 
 	while (1) {
+		//kprintf("Im here\n");
 		ch = getch();
 		if (ch=='\n' || ch=='\r') {
 			putch('\n');
Index: kern/userprog/runprogram.c
===================================================================
--- kern/userprog/runprogram.c	(.../tags/asst2-start)	(revision 75)
+++ kern/userprog/runprogram.c	(.../trunk)	(revision 75)
@@ -1,3 +1,4 @@
+
 /*
  * Sample/test code for running a user program.  You can use this for
  * reference when implementing the execv() system call. Remember though
@@ -22,7 +23,7 @@
  * Calls vfs_open on progname and thus may destroy it.
  */
 int
-runprogram(char *progname)
+runprogram(char *progname, unsigned long  argc, char ** argv)
 {
 	struct vnode *v;
 	vaddr_t entrypoint, stackptr;
@@ -66,7 +67,41 @@
 	}
 
 	/* Warp to user mode. */
-	md_usermode(0 /*argc*/, NULL /*userspace addr of argv*/,
+	int i=0;
+	int sum=0;
+	int actual=0;
+	int pointers[16];
+
+    	//preparing the stack
+	for (i=0;i<argc;i++) // total number of characters
+		sum+=strlen(argv[i])+1;
+  	stackptr-=(argc+1)* sizeof (vaddr_t)+sum;
+  	//kprintf("1 argc %d\n",argc);
+  	sum=0;
+  	for(i=0; i<argc ;i++)
+  	{
+  			//kprintf("1 [%d] arg %s\n",i,argv[i]);
+	  		result=copyoutstr(argv[i], stackptr+sum, strlen(argv[i])+1, &actual);
+
+	  		if(result){
+	  			//kprintf(" copyoutstr fucked up -_- 0x%x\n",argv[i]);
+				return ENOMEM;
+			}
+
+	  		pointers[i]=stackptr+sum;
+
+			sum+=strlen(argv[i])+1;
+  	}
+
+	pointers[i]=NULL;
+
+  	result=copyout(pointers, stackptr+sum, (argc+1)*sizeof (vaddr_t));
+
+  	if(result){
+		return ENOMEM;
+	}
+
+	md_usermode(argc/*argc*/, stackptr+sum /*userspace addr of argv*/,
 		    stackptr, entrypoint);
 	
 	/* md_usermode does not return */
Index: kern/thread/thread.c
===================================================================
--- kern/thread/thread.c	(.../tags/asst2-start)	(revision 75)
+++ kern/thread/thread.c	(.../trunk)	(revision 75)
@@ -13,6 +13,8 @@
 #include <addrspace.h>
 #include <vnode.h>
 #include "opt-synchprobs.h"
+#include <hashtable.h>
+#include <machine/trapframe.h>
 
 /* States a thread can be in. */
 typedef enum {
@@ -34,6 +36,11 @@
 /* Total number of outstanding threads. Does not count zombies[]. */
 static int numthreads;
 
+/* Table of process's family*/
+struct hashtable * process_table;
+
+#define PTB_SIZE 200
+
 /*
  * Create a thread. This is used both to create the first thread's 
  * thread structure and to create subsequent threads.
@@ -47,11 +54,16 @@
 	if (thread==NULL) {
 		return NULL;
 	}
-	thread->t_name = kstrdup(name);
-	if (thread->t_name==NULL) {
+
+	if (name != NULL)
+	{
+		thread->t_name = kstrdup(name);
+		if (thread->t_name==NULL) {
 		kfree(thread);
 		return NULL;
+		}
 	}
+	
 	thread->t_sleepaddr = NULL;
 	thread->t_stack = NULL;
 	
@@ -59,6 +71,10 @@
 
 	thread->t_cwd = NULL;
 
+	thread->child_list = array_create();
+
+	thread->parent = -2; 
+
 	
 	// If you add things to the thread structure, be sure to initialize
 	// them here.
@@ -84,12 +100,14 @@
 	// These things are cleaned up in thread_exit.
 	assert(thread->t_vmspace==NULL);
 	assert(thread->t_cwd==NULL);
+
 	
 	if (thread->t_stack) {
 		kfree(thread->t_stack);
 	}
 
 	kfree(thread->t_name);
+	array_destroy(thread->child_list);
 	kfree(thread);
 }
 
@@ -171,6 +189,7 @@
 thread_bootstrap(void)
 {
 	struct thread *me;
+	int key;
 
 	/* Create the data structures we need. */
 	sleepers = array_create();
@@ -191,8 +210,22 @@
 	if (me==NULL) {
 		panic("thread_bootstrap: Out of memory\n");
 	}
+	
+	
 
-	/*
+	process_table = ht_create(PTB_SIZE, "PROCESS TABLE");
+	process_table->table[0] = & (process_table->reserved);
+	if (process_table == NULL){
+	 	panic("thread_bootstrap: Out of memory\n");
+	}
+
+	int tid = ht_add_element(process_table, me->t_name, me);
+	 if (tid == -1){
+	 	panic("thread_bootstrap: Not added to proces table\n");
+	 }
+	 me->tid = tid; 
+	 
+	 /*
 	 * Leave me->t_stack NULL. This means we're using the boot stack,
 	 * which can't be freed.
 	 */
@@ -235,37 +268,88 @@
 	    void (*func)(void *, unsigned long),
 	    struct thread **ret)
 {
-	struct thread *newguy;
+	struct thread *child_thread;
 	int s, result;
 
 	/* Allocate a thread */
-	newguy = thread_create(name);
-	if (newguy==NULL) {
+	child_thread = thread_create(name);
+	if (child_thread==NULL) {
 		return ENOMEM;
 	}
 
 	/* Allocate a stack */
-	newguy->t_stack = kmalloc(STACK_SIZE);
-	if (newguy->t_stack==NULL) {
-		kfree(newguy->t_name);
-		kfree(newguy);
+	child_thread->t_stack = kmalloc(STACK_SIZE);
+	if (child_thread->t_stack==NULL) {
+		//kfree(child_thread->t_name);
+		kfree(child_thread);
 		return ENOMEM;
 	}
 
 	/* stick a magic number on the bottom end of the stack */
-	newguy->t_stack[0] = 0xae;
-	newguy->t_stack[1] = 0x11;
-	newguy->t_stack[2] = 0xda;
-	newguy->t_stack[3] = 0x33;
+	child_thread->t_stack[0] = 0xae;
+	child_thread->t_stack[1] = 0x11;
+	child_thread->t_stack[2] = 0xda;
+	child_thread->t_stack[3] = 0x33;
 
 	/* Inherit the current directory */
 	if (curthread->t_cwd != NULL) {
 		VOP_INCREF(curthread->t_cwd);
-		newguy->t_cwd = curthread->t_cwd;
+		child_thread->t_cwd = curthread->t_cwd;
 	}
 
+    /* Allocate name for child thread */
+	child_thread->t_name = (char *)kmalloc(20*sizeof(char));
+	if (child_thread->t_name == NULL)
+		return ENOMEM;
+
+	snprintf(child_thread->t_name, 20, "%lx",child_thread);
+
+
+	if (func == md_forkentry)
+	{
+		int errr = as_copy(curthread->t_vmspace, &(child_thread->t_vmspace));
+		//lock_release(tlb_lock);
+		if(errr)
+		{
+			return errr;
+		} 
+	}
+
+
+	/*************** DATA ALLOCATION TO HANDLE WAIT & EXIT **************/
+
+
+	int tid = ht_add_element(process_table, child_thread->t_name, child_thread);
+	if (tid == -2){
+		/* Means too many process exists */
+		return EAGAIN;
+	}
+	if (tid == -1){
+		/* Means no memory available */
+		return ENOMEM;
+	}
+
+	child_thread->tid = tid;
+	child_thread->parent = curthread->tid;
+
+	struct child_info* item = (struct child_info *) kmalloc (sizeof (struct child_info));
+	if (item == NULL){
+		return ENOMEM;
+	}
+
+	item->child_tid = tid;
+	item->status = FREE;
+
+	//Adding to cutthread child_list
+	 int err = array_add(curthread->child_list, item);  // handelllee eeerrorr 
+	 if (err)
+	 	return err;
+
+   ///
+
+
 	/* Set up the pcb (this arranges for func to be called) */
-	md_initpcb(&newguy->t_pcb, newguy->t_stack, data1, data2, func);
+	md_initpcb(&child_thread->t_pcb, child_thread->t_stack, data1, data2, func);
 
 	/* Interrupts off for atomicity */
 	s = splhigh();
@@ -290,7 +374,7 @@
 	}
 
 	/* Make the new thread runnable */
-	result = make_runnable(newguy);
+	result = make_runnable(child_thread);
 	if (result != 0) {
 		goto fail;
 	}
@@ -313,19 +397,19 @@
 	 * might exit at any time.
 	 */
 	if (ret != NULL) {
-		*ret = newguy;
+		*ret = child_thread;
 	}
 
 	return 0;
 
  fail:
 	splx(s);
-	if (newguy->t_cwd != NULL) {
-		VOP_DECREF(newguy->t_cwd);
+	if (child_thread->t_cwd != NULL) {
+		VOP_DECREF(child_thread->t_cwd);
 	}
-	kfree(newguy->t_stack);
-	kfree(newguy->t_name);
-	kfree(newguy);
+	kfree(child_thread->t_stack);
+	kfree(child_thread->t_name);
+	kfree(child_thread);
 
 	return result;
 }
@@ -419,6 +503,8 @@
 	}
 }
 
+
+
 /*
  * Cause the current thread to exit.
  *
@@ -451,8 +537,11 @@
 		 * context switch code.
 		 */
 		struct addrspace *as = curthread->t_vmspace;
-		curthread->t_vmspace = NULL;
-		as_destroy(as);
+
+		lock_acquire(tlb_lock);
+			curthread->t_vmspace = NULL;
+			as_destroy(as);
+		lock_release(tlb_lock);
 	}
 
 	if (curthread->t_cwd) {
Index: testbin/forkexecbomb/forkexecbomb.c
===================================================================
--- testbin/forkexecbomb/forkexecbomb.c	(.../tags/asst2-start)	(revision 75)
+++ testbin/forkexecbomb/forkexecbomb.c	(.../trunk)	(revision 75)
@@ -32,15 +32,19 @@
 int
 main(int argc, char *argv[])
 {
-	int i;
-        (void)argc;
-
+	
 	while (1) {
-                ppid = getpid();
+            /*    ppid = getpid();
 		pid = fork();
+        if (!pid)
+          //  printf("START: pid %d \n", getpid());
+		//printf("ppid %d >=== %d \n",getpid(),pid);
+		//printf("pid %d \n",pid);		//printf("this is arg pointer 0x%x and arg[0] 0x%x\n",argv,argv[0]);
+		//printf("this is my pid%d and arg %s \n",pid,argv[0]);
                 assert(argv != 0);
 
                 if (pid < 0) {
+                		printf("ERROR : %s",strerror(errno));
                         if (errno != ENOMEM)
                                 warn("fork");
                 }
@@ -49,13 +53,17 @@
                               (unsigned int)argv);
                 }
                 if (ppid % 2) {
+                		//printf("EXEC WAS CALLED pointer 0x%x and arg[0] 0x%x\n",argv,argv[0]);
                         execv(argv[0], argv);
                         if (errno != ENOMEM && errno != ENFILE)
-                                warn("execv");
+                        {
+                                printf("ERROR : %s",strerror(errno));
+                                warn("execv dodol");
+                        }
                 }
-		pid = getpid();
+		pid = getpid();*/
 		/* Make sure each fork has its own address space. */
-		for (i=0; i<300; i++) {
+		/*for (i=0; i<100; i++) {
 			volatile int seenpid;
 			seenpid = pid;
 			if (seenpid != getpid()) {
@@ -63,6 +71,15 @@
 				     "- your vm is broken!", 
 				     seenpid, getpid());
 			}
-		}
+		}*/
+
+            execv(argv[0], argv);
+         /*if (errno != ENOMEM && errno != ENFILE)
+                        {
+                                printf("ERROR : %s",strerror(errno));
+                                warn("execv dodol");
+                        }*/
+		//k++;
 	}
+	printf("EXIT : pid %d \n", getpid());
 }
Index: testbin/waitexit5/waitexit5.c
===================================================================
--- testbin/waitexit5/waitexit5.c	(.../tags/asst2-start)	(revision 75)
+++ testbin/waitexit5/waitexit5.c	(.../trunk)	(revision 75)
@@ -91,7 +91,8 @@
 
         if (getpid() == pid_p) {
                 dowait(pid_c);
-        } else {
+        } 
+        else {
                 printf("wrong!\n");
         }
 
Index: testbin/forkbomb/forkbomb.c
===================================================================
--- testbin/forkbomb/forkbomb.c	(.../tags/asst2-start)	(revision 75)
+++ testbin/forkbomb/forkbomb.c	(.../trunk)	(revision 75)
@@ -29,8 +29,9 @@
 	int i;
 
 	while (1) {
+		printf("%d forking\n", getpid());
 		fork();
-
+		printf("%d running\n", getpid());
 		pid = getpid();
 
 		/* Make sure each fork has its own address space. */
Index: testbin/printf/printf.c
===================================================================
--- testbin/printf/printf.c	(.../tags/asst2-start)	(revision 75)
+++ testbin/printf/printf.c	(.../trunk)	(revision 75)
@@ -4,6 +4,14 @@
 int
 main(void)
 {
+		
         printf("printf works!\n");
+        printf("Enter your character:");
+        int i = 0;
+        /*for (i=0; i <1000; i++)
+        	printf("the number is %d", i); */
+        printf("Enter your character:");
+        int c = getchar();
+        printf("The character read %d\n",c); 
 	return 0;
 }
Index: testbin/crash/crash.c
===================================================================
--- testbin/crash/crash.c	(.../tags/asst2-start)	(revision 75)
+++ testbin/crash/crash.c	(.../trunk)	(revision 75)
@@ -209,8 +209,8 @@
 
 		printf("Choose: ");
 		op = getchar();
+		
 	}
-
 	if (op=='*') {
 		for (i=0; ops[i].name; i++) {
 			printf("Running: [%c] %s\n", ops[i].ch, ops[i].name);
Index: testbin/forktest/forktest.c
===================================================================
--- testbin/forktest/forktest.c	(.../tags/asst2-start)	(revision 75)
+++ testbin/forktest/forktest.c	(.../trunk)	(revision 75)
@@ -131,7 +131,7 @@
 	dowait(nowait, pid1);
 	dowait(nowait, pid0);
 
-	putchar('\n');
+	putchar('helloo\n');
 }
 
 int
